//------------------------------------------------------------------------------
// <auto-generated>
//     Codice generato da un modello.
//
//     Le modifiche manuali a questo file potrebbero causare un comportamento imprevisto dell'applicazione.
//     Se il codice viene rigenerato, le modifiche manuali al file verranno sovrascritte.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeTorneo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GeTorneoEntities : DbContext
    {
        public GeTorneoEntities()
            : base("name=GeTorneoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Attributi> Attributi { get; set; }
        public virtual DbSet<Iscrizioni> Iscrizioni { get; set; }
        public virtual DbSet<Personaggi> Personaggi { get; set; }
        public virtual DbSet<Ruoli> Ruoli { get; set; }
        public virtual DbSet<Tornei> Tornei { get; set; }
        public virtual DbSet<Utenti> Utenti { get; set; }
    
        public virtual int AggiungiTorneo(string nome, Nullable<int> durata, Nullable<int> num_Max, string regolamento, Nullable<double> premio, string descrizione)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var durataParameter = durata.HasValue ?
                new ObjectParameter("Durata", durata) :
                new ObjectParameter("Durata", typeof(int));
    
            var num_MaxParameter = num_Max.HasValue ?
                new ObjectParameter("Num_Max", num_Max) :
                new ObjectParameter("Num_Max", typeof(int));
    
            var regolamentoParameter = regolamento != null ?
                new ObjectParameter("Regolamento", regolamento) :
                new ObjectParameter("Regolamento", typeof(string));
    
            var premioParameter = premio.HasValue ?
                new ObjectParameter("Premio", premio) :
                new ObjectParameter("Premio", typeof(double));
    
            var descrizioneParameter = descrizione != null ?
                new ObjectParameter("Descrizione", descrizione) :
                new ObjectParameter("Descrizione", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AggiungiTorneo", nomeParameter, durataParameter, num_MaxParameter, regolamentoParameter, premioParameter, descrizioneParameter);
        }
    }
}
